{"ast":null,"code":"var _jsxFileName = \"/Users/andrewyoung/escortverif/client/src/CropImage.js\";\nimport ReactDOM from \"react-dom\";\nimport React, { PureComponent } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nexport default class CropTest extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      src: null,\n      crop: {\n        aspect: 100 / 100,\n        width: 200,\n        height: 200,\n        unit: \"px\" // x: (window.innerWidth - window.innerWidth) / 2,\n        // y: (window.innerWidth - window.innerWidth) / 2,\n\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.aspect) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.jpeg\");\n      this.setState({\n        croppedImageUrl\n      }); // this.props.setCroppedImg(croppedImageUrl);\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        this.props.setCroppedImg(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    const picture = this.props.picture;\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    const {\n      showCroppedImage,\n      showOriginalImage\n    } = this.props;\n    const screenWidth = window.innerWidth;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, showOriginalImage && /*#__PURE__*/React.createElement(ReactCrop, {\n      src: picture,\n      crop: crop,\n      ruleOfThirds: true,\n      circularCrop: true // style={{ height: \"30vh\" }}\n      ,\n      imageStyle: {\n        maxHeight: \"40vh\"\n      },\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 30,\n        height: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), croppedImageUrl && showCroppedImage && /*#__PURE__*/React.createElement(\"img\", {\n      id: \"cropped-image\",\n      alt: \"Crop\",\n      style: {\n        width: 200,\n        height: 200,\n        borderRadius: 100,\n        borderStyle: \"solid\",\n        borderColor: \"transparent\"\n      },\n      src: croppedImageUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/andrewyoung/escortverif/client/src/CropImage.js"],"names":["ReactDOM","React","PureComponent","ReactCrop","CropTest","constructor","props","state","src","crop","aspect","width","height","unit","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","setCroppedImg","render","picture","showCroppedImage","showOriginalImage","screenWidth","innerWidth","display","flexDirection","justifyContent","alignItems","maxHeight","borderRadius","borderStyle","borderColor"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { PureComponent } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nexport default class CropTest extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    src: null,\n    crop: {\n      aspect: 100 / 100,\n      width: 200,\n      height: 200,\n      unit: \"px\",\n\n      // x: (window.innerWidth - window.innerWidth) / 2,\n      // y: (window.innerWidth - window.innerWidth) / 2,\n    },\n  };\n\n  onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = (image) => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = (crop) => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.aspect) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        \"newFile.jpeg\"\n      );\n      this.setState({ croppedImageUrl });\n      // this.props.setCroppedImg(croppedImageUrl);\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        this.props.setCroppedImg(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    const picture = this.props.picture;\n    const { crop, croppedImageUrl, src } = this.state;\n    const { showCroppedImage, showOriginalImage } = this.props;\n    const screenWidth = window.innerWidth;\n\n    return (\n      <div\n        className=\"App\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {showOriginalImage && (\n          <ReactCrop\n            src={picture}\n            crop={crop}\n            ruleOfThirds\n            circularCrop={true}\n            // style={{ height: \"30vh\" }}\n            imageStyle={{ maxHeight: \"40vh\" }}\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n\n        <div style={{ width: 30, height: 30 }}></div>\n\n        {croppedImageUrl && showCroppedImage && (\n          <img\n            id=\"cropped-image\"\n            alt=\"Crop\"\n            style={{\n              width: 200,\n              height: 200,\n              borderRadius: 100,\n              borderStyle: \"solid\",\n              borderColor: \"transparent\",\n            }}\n            src={croppedImageUrl}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}